pdf("D:/divyoj/Semester_courses/EC 303/Assignment1/power_law_distribution.pdf")
# Plot
plot(alpha_array~mu_array,type='o', col='black',lwd=2, pch=16,
main="MSD exponent vs mu", xlab="mu",ylab="MSD exponent")
dev.off()
alpha_array<- numeric(length(mu_array))
#A simple R code to simulate two-dimensional random walk and to compute MSD
#by Vishwesha Guttal, CES, IISc
#written on 18th Aug 2021.
source('msd-fns.R')
library(poweRlaw)
animate<-0
steady_state_plot<-1
T<-10000 #number of timesteps to simulate
# Parameters for jump-length distribution:
mu_array<- seq(1.5,3.5,by=0.1)
alpha_array<- numeric(length(mu_array))
index<-0
for (mu in mu_array){
index<-index +1
index
#create vectors to store values of coordinates
x<-numeric(T)
y<-numeric(T)
#Without loss of generality, assign the initial location to origin.
x[1]<-0
y[1]<-0
#Simulate
for (i in 2:T){
# angle :
theta <- runif(1,-pi,pi)
# jump length from Uniform distribution :
d <-  rplcon(1,1,mu)
#Add that to the current location
x[i] <- x[i-1] + d*cos(theta)
y[i] <- y[i-1] + d*sin(theta)
if (animate == 1)
{
#Visualise line an animation
plot(x[1:i],y[1:i], type='o', col='black',lwd=2, pch=16)
points(x[1],y[1],pch=22,col="blue",cex=2,lwd=3)
points(x[i],y[i],pch=22,col="red",cex=2,lwd=3)
#This command is crucial to observe animation
Sys.sleep(0.1)
}
}
## Saving the plots
if (steady_state_plot==1)
{
jpeg(paste0("D:/divyoj/Semester_courses/EC 303/Assignment1/power_law_plots/mu=",mu,".jpg"))
plot(x[1:T],y[1:T], type='o', col='black',lwd=2, pch=16,main=paste0("Trajectory for mu=",mu))
points(x[1],y[1],pch=22,col="blue",cex=2,lwd=3)
points(x[T],y[T],pch=22,col="red",cex=2,lwd=3)
dev.off()
}
## Calculating msd and alpha:
msdest <- msd(x,y)
alpha_array[index] <- msdest$alpha[1]
}
pdf("D:/divyoj/Semester_courses/EC 303/Assignment1/power_law_distribution.pdf")
# Plot
plot(alpha_array~mu_array,type='o', col='black',lwd=2, pch=16,
main="MSD exponent vs mu", xlab="mu",ylab="MSD exponent")
dev.off()
#A simple R code to simulate two-dimensional random walk and to compute MSD
#by Vishwesha Guttal, CES, IISc
#written on 18th Aug 2021.
source('msd-fns.R')
library(poweRlaw)
animate<-0
steady_state_plot<-1
T<-10000 #number of timesteps to simulate
# Parameters for jump-length distribution:
a_array<- seq(5,100,by=5)
alpha_array<- numeric(length(a_array))
index<-0
for (a in a_array){
index<-index +1
index
#create vectors to store values of coordinates
x<-numeric(T)
y<-numeric(T)
#Without loss of generality, assign the initial location to origin.
x[1]<-0
y[1]<-0
#Simulate
for (i in 2:T){
# angle :
theta <- runif(1,-pi,pi)
# jump length from Uniform distribution :
d <- runif(1,0,a)
a
#Add that to the current location
x[i] <- x[i-1] + d*cos(theta)
y[i] <- y[i-1] + d*sin(theta)
if (animate == 1)
{
#Visualise line an animation
plot(x[1:i],y[1:i], type='o', col='black',lwd=2, pch=16)
points(x[1],y[1],pch=22,col="blue",cex=2,lwd=3)
points(x[i],y[i],pch=22,col="red",cex=2,lwd=3)
#This command is crucial to observe animation
Sys.sleep(0.1)
}
}
## Saving the plots
if (steady_state_plot==1)
{
jpeg(paste0("E:/Semester_Courses/9th Semester/New folder/Uniform_plots/a=",a,".jpg"))
plot(x[1:T],y[1:T], type='o', col='black',lwd=2, pch=16, main=paste0("Trajecory for a=",a))
points(x[1],y[1],pch=22,col="blue",cex=2,lwd=3)
points(x[T],y[T],pch=22,col="red",cex=2,lwd=3)
dev.off()
}
## Calculating msd and alpha:
msdest <- msd(x,y)
alpha_array[index] <- msdest$alpha[1]
}
pdf("E:/Semester_Courses/9th Semester/New folder/Uniform_distribution.pdf")
plot(alpha_array~a_array,type='o', col='black',lwd=2, pch=16,
main="MSD exponent vs max step length", xlab="a",ylab="MSD exponent")
dev.off()
#A simple R code to simulate two-dimensional random walk and to compute MSD
#by Vishwesha Guttal, CES, IISc
#written on 18th Aug 2021.
source('msd-fns.R')
library(poweRlaw)
animate<-0
steady_state_plot<-1
T<-100000 #number of timesteps to simulate
# Parameters for jump-length distribution:
a_array<- seq(5,100,by=5)
alpha_array<- numeric(length(a_array))
index<-0
for (a in a_array){
index<-index +1
index
#create vectors to store values of coordinates
x<-numeric(T)
y<-numeric(T)
#Without loss of generality, assign the initial location to origin.
x[1]<-0
y[1]<-0
#Simulate
for (i in 2:T){
# angle :
theta <- runif(1,-pi,pi)
# jump length from Uniform distribution :
d <- runif(1,0,a)
a
#Add that to the current location
x[i] <- x[i-1] + d*cos(theta)
y[i] <- y[i-1] + d*sin(theta)
if (animate == 1)
{
#Visualise line an animation
plot(x[1:i],y[1:i], type='o', col='black',lwd=2, pch=16)
points(x[1],y[1],pch=22,col="blue",cex=2,lwd=3)
points(x[i],y[i],pch=22,col="red",cex=2,lwd=3)
#This command is crucial to observe animation
Sys.sleep(0.1)
}
}
## Saving the plots
if (steady_state_plot==1)
{
jpeg(paste0("D:/divyoj/Semester_courses/EC 303/Assignment1/Uniform_plots/a=",a,".jpg"))
plot(x[1:T],y[1:T], type='o', col='black',lwd=2, pch=16, main=paste0("Trajecory for a=",a))
points(x[1],y[1],pch=22,col="blue",cex=2,lwd=3)
points(x[T],y[T],pch=22,col="red",cex=2,lwd=3)
dev.off()
}
## Calculating msd and alpha:
msdest <- msd(x,y)
alpha_array[index] <- msdest$alpha[1]
}
pdf("D:/divyoj/Semester_courses/EC 303/Assignment1/Uniform_distribution.pdf")
plot(alpha_array~a_array,type='o', col='black',lwd=2, pch=16,
main="MSD exponent vs max step length", xlab="a",ylab="MSD exponent")
dev.off()
#A simple R code to simulate two-dimensional random walk and to compute MSD
#by Vishwesha Guttal, CES, IISc
#written on 18th Aug 2021.
source('msd-fns.R')
library(poweRlaw)
animate<-0
steady_state_plot<-1
T<-10000#number of timesteps to simulate
# Parameters for jump-length distribution:
a_array<- seq(5,100,by=5)
alpha_array<- numeric(length(a_array))
index<-0
for (a in a_array){
index<-index +1
index
#create vectors to store values of coordinates
x<-numeric(T)
y<-numeric(T)
#Without loss of generality, assign the initial location to origin.
x[1]<-0
y[1]<-0
#Simulate
for (i in 2:T){
# angle :
theta <- runif(1,-pi,pi)
# jump length from Uniform distribution :
d <- runif(1,0,a)
a
#Add that to the current location
x[i] <- x[i-1] + d*cos(theta)
y[i] <- y[i-1] + d*sin(theta)
if (animate == 1)
{
#Visualise line an animation
plot(x[1:i],y[1:i], type='o', col='black',lwd=2, pch=16)
points(x[1],y[1],pch=22,col="blue",cex=2,lwd=3)
points(x[i],y[i],pch=22,col="red",cex=2,lwd=3)
#This command is crucial to observe animation
Sys.sleep(0.1)
}
}
## Saving the plots
if (steady_state_plot==1)
{
jpeg(paste0("D:/divyoj/Semester_courses/EC 303/Assignment1/Uniform_plots/a=",a,".jpg"))
plot(x[1:T],y[1:T], type='o', col='black',lwd=2, pch=16, main=paste0("Trajecory for a=",a))
points(x[1],y[1],pch=22,col="blue",cex=2,lwd=3)
points(x[T],y[T],pch=22,col="red",cex=2,lwd=3)
dev.off()
}
## Calculating msd and alpha:
msdest <- msd(x,y)
alpha_array[index] <- msdest$alpha[1]
}
pdf("D:/divyoj/Semester_courses/EC 303/Assignment1/Uniform_distribution.pdf")
plot(alpha_array~a_array,type='o', col='black',lwd=2, pch=16,
main="MSD exponent vs max step length", xlab="a",ylab="MSD exponent")
dev.off()
#A simple R code to simulate two-dimensional random walk and to compute MSD
#by Vishwesha Guttal, CES, IISc
#written on 18th Aug 2021.
source('msd-fns.R')
library(poweRlaw)
animate<-0
steady_state_plot<-1
T<-10000 #number of timesteps to simulate
# Parameters for jump-length distribution:
mu_array<- seq(1.5,3.5,by=0.1)
alpha_array<- numeric(length(mu_array))
index<-0
for (mu in mu_array){
index<-index +1
index
#create vectors to store values of coordinates
x<-numeric(T)
y<-numeric(T)
#Without loss of generality, assign the initial location to origin.
x[1]<-0
y[1]<-0
#Simulate
for (i in 2:T){
# angle :
theta <- runif(1,-pi,pi)
# jump length from Uniform distribution :
d <-  rplcon(1,1,mu)
#Add that to the current location
x[i] <- x[i-1] + d*cos(theta)
y[i] <- y[i-1] + d*sin(theta)
if (animate == 1)
{
#Visualise line an animation
plot(x[1:i],y[1:i], type='o', col='black',lwd=2, pch=16)
points(x[1],y[1],pch=22,col="blue",cex=2,lwd=3)
points(x[i],y[i],pch=22,col="red",cex=2,lwd=3)
#This command is crucial to observe animation
Sys.sleep(0.1)
}
}
## Saving the plots
if (steady_state_plot==1)
{
jpeg(paste0("D:/divyoj/Semester_courses/EC 303/Assignment1/power_law_plots/mu=",mu,".jpg"))
plot(x[1:T],y[1:T], type='o', col='black',lwd=2, pch=16,main=paste0("Trajectory for mu=",mu))
points(x[1],y[1],pch=22,col="blue",cex=2,lwd=3)
points(x[T],y[T],pch=22,col="red",cex=2,lwd=3)
dev.off()
}
## Calculating msd and alpha:
msdest <- msd(x,y)
alpha_array[index] <- msdest$alpha[1]
}
pdf("D:/divyoj/Semester_courses/EC 303/Assignment1/power_law_distribution.pdf")
# Plot
plot(alpha_array~mu_array,type='o', col='black',lwd=2, pch=16,
main="MSD exponent vs mu", xlab="mu",ylab="MSD exponent")
dev.off()
## R code to calculate MSD exponent vs exponent in the power law distribution of
#jump length. It also saves the trajecory at the final timepoint if asked,
# The code has been adapted from the code written by Prof Guttal.
source('msd-fns.R')
library(poweRlaw)
animate<-0
steady_state_plot<-1
T<-10000 #number of timesteps to simulate
# Parameters for jump-length distribution:
mu_array<- seq(1.5,3.5,by=0.1)
alpha_array<- numeric(length(mu_array))
index<-0
for (mu in mu_array){
index<-index +1
index
#create vectors to store values of coordinates
x<-numeric(T)
y<-numeric(T)
#Without loss of generality, assign the initial location to origin.
x[1]<-0
y[1]<-0
#Simulate
for (i in 2:T){
# angle :
theta <- runif(1,-pi,pi)
# jump length from Uniform distribution :
d <-  rplcon(1,1,mu)
#Add that to the current location
x[i] <- x[i-1] + d*cos(theta)
y[i] <- y[i-1] + d*sin(theta)
if (animate == 1)
{
#Visualise line an animation
plot(x[1:i],y[1:i], type='o', col='black',lwd=2, pch=16)
points(x[1],y[1],pch=22,col="blue",cex=2,lwd=3)
points(x[i],y[i],pch=22,col="red",cex=2,lwd=3)
#This command is crucial to observe animation
Sys.sleep(0.1)
}
}
## Saving the plots
if (steady_state_plot==1)
{
jpeg(paste0("D:/divyoj/Semester_courses/EC 303/Assignment1/power_law_plots/mu=",mu,".jpg"))
plot(x[1:T],y[1:T], type='o', col='black',lwd=2, pch=16,main=paste0("Trajectory for mu=",mu))
points(x[1],y[1],pch=22,col="blue",cex=2,lwd=3)
points(x[T],y[T],pch=22,col="red",cex=2,lwd=3)
dev.off()
}
## Calculating msd and alpha:
msdest <- msd(x,y)
alpha_array[index] <- msdest$alpha[1]
}
pdf("D:/divyoj/Semester_courses/EC 303/Assignment1/power_law_distribution.pdf")
# Plot
plot(alpha_array~mu_array,type='o', col='black',lwd=2, pch=16,
main="MSD exponent vs mu", xlab="mu",ylab="MSD exponent")
dev.off()
source("D:/divyoj/Semester_courses/EC 303/Assignment1/msd-fns.R")
## R code to calculate MSD exponent vs exponent in the power law distribution of
#jump length. It also saves the trajecory at the final timepoint if asked,
# The code has been adapted from the code written by Prof Guttal.
source('msd-fns.R')
library(poweRlaw)
animate<-0
steady_state_plot<-1
T<-10000 #number of timesteps to simulate
# Parameters for jump-length distribution:
mu_array<- seq(1.5,3.5,by=0.1)
alpha_array<- numeric(length(mu_array))
index<-0
for (mu in mu_array){
index<-index +1
index
#create vectors to store values of coordinates
x<-numeric(T)
y<-numeric(T)
#Without loss of generality, assign the initial location to origin.
x[1]<-0
y[1]<-0
#Simulate
for (i in 2:T){
# angle :
theta <- runif(1,-pi,pi)
# jump length from Uniform distribution :
d <-  rplcon(1,1,mu)
#Add that to the current location
x[i] <- x[i-1] + d*cos(theta)
y[i] <- y[i-1] + d*sin(theta)
if (animate == 1)
{
#Visualise line an animation
plot(x[1:i],y[1:i], type='o', col='black',lwd=2, pch=16)
points(x[1],y[1],pch=22,col="blue",cex=2,lwd=3)
points(x[i],y[i],pch=22,col="red",cex=2,lwd=3)
#This command is crucial to observe animation
Sys.sleep(0.1)
}
}
## Saving the plots
if (steady_state_plot==1)
{
jpeg(paste0("D:/divyoj/Semester_courses/EC 303/Assignment1/power_law_plots/mu=",mu,".jpg"))
plot(x[1:T],y[1:T], type='o', col='black',lwd=2, pch=16,main=paste0("Trajectory for mu=",mu))
points(x[1],y[1],pch=22,col="blue",cex=2,lwd=3)
points(x[T],y[T],pch=22,col="red",cex=2,lwd=3)
dev.off()
}
## Calculating msd and alpha:
msdest <- msd(x,y)
alpha_array[index] <- msdest$alpha[1]
}
pdf("D:/divyoj/Semester_courses/EC 303/Assignment1/power_law_distribution.pdf")
# Plot
plot(alpha_array~mu_array,type='o', col='black',lwd=2, pch=16,
main="MSD exponent vs mu", xlab="mu",ylab="MSD exponent")
dev.off()
source("D:/divyoj/Semester_courses/EC 303/Assignment1/msd-fns.R")
#Without loss of generality, assign the initial location to origin.
x[1]<-0
## R code to calculate MSD exponent vs exponent in the power law distribution of
#jump length. It also saves the trajecory at the final timepoint if asked,
# The code has been adapted from the code written by Prof Guttal.
source('msd-fns.R')
library(poweRlaw)
animate<-0
steady_state_plot<-1
T<-10000 #number of timesteps to simulate
# Parameters for jump-length distribution:
mu_array<- seq(1.5,3.5,by=0.1)
alpha_array<- numeric(length(mu_array))
index<-0
for (mu in mu_array){
index<-index +1
index
#create vectors to store values of coordinates
x<-numeric(T)
y<-numeric(T)
#Without loss of generality, assign the initial location to origin.
x[1]<-0
y[1]<-0
#Simulate
for (i in 2:T){
# angle :
theta <- runif(1,-pi,pi)
# jump length from Uniform distribution :
d <-  rplcon(1,1,mu)
#Add that to the current location
x[i] <- x[i-1] + d*cos(theta)
y[i] <- y[i-1] + d*sin(theta)
if (animate == 1)
{
#Visualise line an animation
plot(x[1:i],y[1:i], type='o', col='black',lwd=2, pch=16)
points(x[1],y[1],pch=22,col="blue",cex=2,lwd=3)
points(x[i],y[i],pch=22,col="red",cex=2,lwd=3)
#This command is crucial to observe animation
Sys.sleep(0.1)
}
}
## Saving the plots
if (steady_state_plot==1)
{
jpeg(paste0("D:/divyoj/Semester_courses/EC 303/Assignment1/power_law_plots/mu=",mu,".jpg"))
plot(x[1:T],y[1:T], type='o', col='black',lwd=2, pch=16,main=paste0("Trajectory for mu=",mu))
points(x[1],y[1],pch=22,col="blue",cex=2,lwd=3)
points(x[T],y[T],pch=22,col="red",cex=2,lwd=3)
dev.off()
}
## Calculating msd and alpha:
msdest <- msd(x,y)
alpha_array[index] <- msdest$alpha[1]
}
pdf("D:/divyoj/Semester_courses/EC 303/Assignment1/power_law_distribution.pdf")
# Plot
plot(alpha_array~mu_array,type='o', col='black',lwd=2, pch=16,
main="MSD exponent vs mu", xlab="mu",ylab="MSD exponent")
dev.off()
source("D:/Abheepsa_and_rashi/Stochastic Simulations v3/plot_theme.R")
source("D:/Abheepsa_and_rashi/Stochastic Simulations v3/plotFuncs.R")
source("D:/Abheepsa_and_rashi/Stochastic Simulations v3/simFuncs.R")
landscape_full_folder("./100_0.5/",filenames_list=c(118,124,100,114,217,255))
work_dir <- "D:/Abheepsa_and_rashi/Stochastic Simulations v3/input_files"
setwd(work_dir)
landscape_full_folder("./100_0.5/",filenames_list=c(118,124,100,114,217,255)) #
source("D:/Abheepsa_and_rashi/Stochastic Simulations v3/plot_theme.R")
source("D:/Abheepsa_and_rashi/Stochastic Simulations v3/plotFuncs.R")
source("D:/Abheepsa_and_rashi/Stochastic Simulations v3/simFuncs.R")
work_dir <- "D:/Abheepsa_and_rashi/Stochastic Simulations v3/input_files"
setwd(work_dir)
landscape_full_folder("./100_0.5/",filenames_list=c(118,124,100,114,217,255)) #
landscape_full_folder("./100_1/",filenames_list=c(118,124,100,114,217,255)) #
landscape_full_folder("./100_0.75/",filenames_list=c(118,124,100,114,217,255)) #
landscape_full_folder("./100_1/",filenames_list=c(118,124,100,114,217,255)) #
source("D:/Abheepsa_and_rashi/Stochastic Simulations v3/plot_theme.R")
source("D:/Abheepsa_and_rashi/Stochastic Simulations v3/plotFuncs.R")
source("D:/Abheepsa_and_rashi/Stochastic Simulations v3/simFuncs.R")
landscape_full_folder("./100_0.75/",filenames_list=c(118,124,100,114,217,255)) #
source("D:/Abheepsa_and_rashi/Stochastic Simulations v3/plot_theme.R")
source("D:/Abheepsa_and_rashi/Stochastic Simulations v3/plotFuncs.R")
source("D:/Abheepsa_and_rashi/Stochastic Simulations v3/simFuncs.R")
work_dir <- "D:/Abheepsa_and_rashi/Stochastic Simulations v3/input_files"
setwd(work_dir)
folder<- paste0("./../scaled_noise_0.75/Parameter_id=",parameter_id,"/")
dfTraj <- read_csv(paste0("./ESMR/",124, "_simDat.csv"))
trajectoriesSwitching(dfTraj, 4, tMin = 60, tMax = 120,folder) # use tMin and tMax for zoomed plots (make sure tMax is not NULL)
work_dir <- "D:/Abheepsa_and_rashi/Stochastic Simulations v3/input_files"
setwd(work_dir)
folder<- paste0("./../scaled_noise_0.75/Parameter_id=",124,"/")
dfTraj <- read_csv(paste0("./ESMR/",124, "_simDat.csv"))
trajectoriesSwitching(dfTraj, 4, tMin = 60, tMax = 120,folder) # use tMin and tMax for zoomed plots (make sure tMax is not NULL)
work_dir <- "D:/Abheepsa_and_rashi/Stochastic Simulations v3/input_files"
setwd(work_dir)
folder<- paste0("./../scaled_noise_0.75/Parameter_id=",124,"/")
dfTraj <- read_csv(paste0("./10_0.75/",124, "_simDat.csv"))
trajectoriesSwitching(dfTraj, 4, tMin = 60, tMax = 120,folder) # use tMin and tMax for zoomed plots (make sure tMax is not NULL)
